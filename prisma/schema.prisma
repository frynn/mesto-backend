generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  firstname  String
  secondname String
  patronymic String
  login      String  @unique
  about      String?
  photo      String?
  date       String

  posts        Post[]
  comments     Comment[]
  likes        Like[]
  savedPosts   SavedPost[]
  blocker      Blacklist[]    @relation("UserBlocks_blockerToUser")
  blocked      Blacklist[]    @relation("UserBlocks_blockedToUser")

  @@map("users")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  link        String
  pictures    String[]
  tag         String
  region      String

  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  comments   Comment[]
  likes      Like[]
  savedPosts SavedPost[]

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("likes")
}

model SavedPost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("savedPosts")
}

model Blacklist {
  id        Int @id @default(autoincrement())
  blockerId Int
  blockedId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blocker User @relation("UserBlocks_blockerToUser", fields: [blockerId], references: [id])
  blocked User @relation("UserBlocks_blockedToUser", fields: [blockedId], references: [id])

  @@map("blacklists")
}


