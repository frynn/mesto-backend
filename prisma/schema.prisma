generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  firstname  String
  secondname String
  patronymic String
  login      String  @unique
  about      String?
  photo      String?
  date       String
  status     String?
  role       String?

  posts        Post[]
  comments     Comment[]
  likes        Like[]
  savedPosts   SavedPost[]
  blocker      Blacklist[]    @relation("UserBlocks_blockerToUser")
  blocked      Blacklist[]    @relation("UserBlocks_blockedToUser")
  subscribers Subscription[] @relation("Subscription_subscriberToUser")
  subscriptions Subscription[] @relation("Subscription_subscriptionToUser")
  reports      Report[]      @relation("UserReports")

  @@map("users")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  link        String
  pictures    String[]
  tag         String
  region      String
  date        DateTime?
  fee         Float?

  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  comments   Comment[]
  likes      Like[]
  savedPosts SavedPost[]
  reports    Report[]    @relation("PostReports")

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("likes")
}

model SavedPost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("savedPosts")
}

model Blacklist {
  id        Int @id @default(autoincrement())
  blockerId Int
  blockedId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blocker User @relation("UserBlocks_blockerToUser", fields: [blockerId], references: [id])
  blocked User @relation("UserBlocks_blockedToUser", fields: [blockedId], references: [id])

  @@map("blacklists")
}

model Subscription {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriberId Int
  subscriber   User @relation("Subscription_subscriberToUser", fields: [subscriberId], references: [id])

  subscriptionId Int
  subscription   User @relation("Subscription_subscriptionToUser", fields: [subscriptionId], references: [id])

  @@map("subscriptions")
}

model Report {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  postId      Int
  post        Post     @relation("PostReports", fields: [postId], references: [id])
  userId      Int
  user        User     @relation("UserReports", fields: [userId], references: [id])

  @@map("reports")
}
